package FileShare;

import UserFileInterface.FileManager;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Kerwan Miguel Antoine
 */
public class Share extends javax.swing.JInternalFrame {

    static File file;
    static String key=null;
    static DefaultListModel model = new DefaultListModel();
    Desktop desktop = Desktop.getDesktop ();
    
    public Share() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Share");
        setBounds(new java.awt.Rectangle(120, 120, 675, 308));
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Grambling_State_Tigers_logo.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(675, 308));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 1, true));
        jPanel1.setBounds(new java.awt.Rectangle(60, 50, 600, 320));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 320));
        jPanel1.setLayout(new java.awt.BorderLayout());

        if (!model.isEmpty ()) {
            model.clear ();
        }
        DBConnection.runListQuery();
        jList1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createTitledBorder(null, "Select Users", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(51, 153, 255)))); // NOI18N
        jList1.setModel(model
        );
        sortList(jList1);
        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jList1.setFixedCellWidth(320);
        jList1.setPreferredSize(new java.awt.Dimension(200, 200));
        jList1.setSelectedIndex(0);
        jList1.setSelectionBackground(new java.awt.Color(51, 153, 255));
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.LINE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(337, 300));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GSU_header.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setBounds(new java.awt.Rectangle(0, 0, 337, 118));
        jLabel1.setMaximumSize(new java.awt.Dimension(337, 118));
        jLabel1.setMinimumSize(new java.awt.Dimension(337, 118));
        jLabel1.setPreferredSize(new java.awt.Dimension(337, 118));
        jPanel2.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jCheckBox1.setForeground(new java.awt.Color(255, 0, 51));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Encrypt File");
        jPanel2.add(jCheckBox1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        jButton1.setText("Share");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);
        this.getRootPane().setDefaultButton(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        file = new File (FileManager.currentFile.getAbsolutePath ());
        String senderEmail = DBConnection.runShareQuery (DBConnection.name)[1];

        if (jList1.isSelectionEmpty()) // Check for no selection
            JOptionPane.showMessageDialog(rootPane, "Please select a user to share", "No User Selected", HEIGHT, new ImageIcon(getClass().getResource("/secureShare_logo.png")));
        else {
Restart:
            if (jCheckBox1.isSelected() && !file.isDirectory ()) {
                JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
                JLabel label = new JLabel("Password: ");
                JPasswordField pword = new JPasswordField(16);
                panel.add(label);

                panel.add(pword);
                String[] options = new String[]{"Encrypt", "Cancel"};
                int option = JOptionPane.showOptionDialog(rootPane, panel, "Enter Encryption Password", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, new ImageIcon(getClass().getResource("/secureShare_logo.png")), options, options[1]);
                if (option == 0){
                    char[] password = pword.getPassword();
                    key = String.copyValueOf(password);   
                    if (key.length () > 7) {
                        try {
                            Crypto.Encrypt(file, key);
                            File source = new File(Crypto.encryptedFile.getAbsolutePath());
                            for (int i=0; i<jList1.getSelectedValuesList ().size (); i++) {
                                File dest = new File("User Files/" + jList1.getSelectedValuesList ().get (i) + "/Shared With Me/");
                                FileUtils.copyToDirectory (source, dest);
                                /*String[] sendDetails = DBConnection.runShareQuery (jList1.getSelectedValuesList().get(i)); //get telephone number and email address for selected shared user
                                ClientConnect.MessageService (sendDetails[0], key); //send encryption password to shared user
                                ClientConnect.EmailService (senderEmail, sendDetails[1], dest.getAbsolutePath()); //send file to shared user through email     
                                try {
                                    URI mailto = new URI("mailto",sendDetails[1],"?subject=You've Received a Shared File&body=Please check your 'Shared With Me' folder.\n\n\nThe password is: " + key);
                                    desktop.mail(mailto);
                                }
                                catch (URISyntaxException ex) {
                                    Logger.getLogger (Share.class.getName()).log (Level.SEVERE, null, ex);
                                }*/
                            }
                            JOptionPane.showMessageDialog(rootPane, "A message has been sent to: " +  jList1.getSelectedValuesList().toString ().replace ("[", "").replace ("]", ""), "Encrypted File Shared", HEIGHT, new ImageIcon(getClass().getResource("/secureShare_logo.png")));
                            source.delete();
                            this.dispose ();
                            SecureShare.fileManager.moveToFront ();
                        }
                        catch (IOException ex) {
                            Logger.getLogger (Share.class.getName()).log (Level.SEVERE, "Error in encryption copy", ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Password must be more than 8 characters", "Password Too Short", HEIGHT, new ImageIcon(getClass().getResource("/secureShare_logo.png")));
                        break Restart;
                    }
                }
                else if (option == 1){
                    panel.setVisible(false);
                }
            }
            else {
                try {
                    for (int i=0; i<jList1.getSelectedValuesList ().size (); i++) {
                        File source = new File(file.getAbsolutePath ());
                        File dest = new File("User Files/" + jList1.getSelectedValuesList ().get (i) + "/Shared With Me/");
                        FileUtils.copyToDirectory (source, dest);
                        /*String[] sendDetails = DBConnection.runShareQuery (jList1.getSelectedValuesList().get(i)); //get telephone number and email address for selected shared user
                        ClientConnect.EmailService (senderEmail, sendDetails[1], dest.getAbsolutePath ()); //send file to shared user through email
                        try {
                            URI mailto = new URI("mailto",sendDetails[1],"?subject=You've Received a Shared File&body=Please check your 'Shared With Me' folder.\n\n\nThe password is: " + key);
                            desktop.mail(mailto);
                        }
                        catch (URISyntaxException ex) {
                            Logger.getLogger (Share.class.getName()).log (Level.SEVERE, null, ex);
                        }*/
                    }
                    JOptionPane.showMessageDialog(rootPane, "A message has been sent to: " +  jList1.getSelectedValuesList().toString ().replace ("[", "").replace ("]", ""), "File Shared Successfully", HEIGHT, new ImageIcon(getClass().getResource("/secureShare_logo.png")));
                    this.dispose ();
                    SecureShare.fileManager.moveToFront ();
                }
                catch (IOException ex) {
                    Logger.getLogger (Share.class.getName()).log (Level.SEVERE, "Error in copy", ex);
                }
            }                     
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose ();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void sortList(JList list) {
      ListModel newModel = list.getModel();

      int n = newModel.getSize();
      String[] data = new String[n];

      for (int i=0; i<n; i++) {
         data[i] = (String) newModel.getElementAt(i);
      }

      Arrays.sort(data);

      list.setListData(data);
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    protected static javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
